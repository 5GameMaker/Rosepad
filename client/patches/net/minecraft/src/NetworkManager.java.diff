--- NetworkManager.java
+++ NetworkManager.java
@@ -1,4 +1,6 @@
 package net.minecraft.src;
 
+import org.lwjgl.Sys;
+
 import java.io.IOException;
 import java.util.Collections;
@@ -13,12 +15,12 @@
     public static int numReadThreads;
     public static int numWriteThreads;
-    private Object sendQueueLock;
-    private Socket networkSocket;
-    private DataInputStream socketInputStream;
-    private DataOutputStream socketOutputStream;
+    private final Object sendQueueLock;
+    private final Socket networkSocket;
+    private final DataInputStream socketInputStream;
+    private final DataOutputStream socketOutputStream;
     boolean isRunning;
-    private List<Packet> readPackets;
-    private List<Packet> dataPackets;
-    private List<Packet> chunkDataPackets;
+    private final List<Packet> readPackets;
+    private final List<Packet> dataPackets;
+    private final List<Packet> chunkDataPackets;
     private NetHandler netHandler;
     boolean isServerTerminating;
@@ -40,7 +42,7 @@
         this.sendQueueLock = new Object();
         this.isRunning = true;
-        this.readPackets = (List<Packet>)Collections.synchronizedList((List)new LinkedList());
-        this.dataPackets = (List<Packet>)Collections.synchronizedList((List)new LinkedList());
-        this.chunkDataPackets = (List<Packet>)Collections.synchronizedList((List)new LinkedList());
+        this.readPackets = Collections.synchronizedList(new LinkedList<>());
+        this.dataPackets = Collections.synchronizedList(new LinkedList<>());
+        this.chunkDataPackets = Collections.synchronizedList(new LinkedList<>());
         this.isServerTerminating = false;
         this.isTerminating = false;
@@ -52,10 +54,11 @@
         this.netHandler = netHandler;
         socket.setTrafficClass(24);
-        this.socketInputStream = new DataInputStream(socket.getInputStream());
-        this.socketOutputStream = new DataOutputStream(socket.getOutputStream());
-        this.readThread = new NetworkReaderThread(this, String.valueOf(name) + " read thread");
-        this.writeThread = new NetworkWriterThread(this, String.valueOf(name) + " write thread");
+        this.socketInputStream = new CountDataInputStream(socket.getInputStream());
+        this.socketOutputStream = new CountDataOutputStream(socket.getOutputStream());
+        this.readThread = new NetworkReaderThread(this, name + " read thread");
+        this.writeThread = new NetworkWriterThread(this, name + " write thread");
         this.readThread.start();
         this.writeThread.start();
+        ThreadBandwidthCounter.spawn();
     }
     
@@ -73,5 +76,4 @@
             }
         }
-        // monitorexit(this.sendQueueLock)
     }
     
@@ -92,8 +94,7 @@
                 final Packet packet;
                 synchronized (this.sendQueueLock) {
-                    packet = (Packet)this.dataPackets.remove(0);
+                    packet = this.dataPackets.remove(0);
                     this.sendQueueByteLength -= packet.getPacketSize() + 1;
                 }
-                // monitorexit(this.sendQueueLock)
                 Packet.writePacket(packet, this.socketOutputStream);
             }
@@ -102,8 +103,7 @@
                 final Packet packet;
                 synchronized (this.sendQueueLock) {
-                    packet = (Packet)this.chunkDataPackets.remove(0);
+                    packet = this.chunkDataPackets.remove(0);
                     this.sendQueueByteLength -= packet.getPacketSize() + 1;
                 }
-                // monitorexit(this.sendQueueLock)
                 Packet.writePacket(packet, this.socketOutputStream);
                 this.chunkDataSendCounter = 50;
@@ -113,5 +113,5 @@
             }
         }
-        catch (InterruptedException ex) {}
+        catch (InterruptedException ignored) {}
         catch (Exception exception) {
             if (!this.isTerminating) {
@@ -140,8 +140,9 @@
     private void onNetworkError(final Exception exception) {
         exception.printStackTrace();
-        this.networkShutdown(new StringBuilder("Internal exception: ").append(exception.toString()).toString());
+        this.networkShutdown("Internal exception: " + exception.toString());
     }
     
     public void networkShutdown(final String reason) {
+        System.out.println("Network closed: " + reason);
         if (!this.isRunning) {
             return;
@@ -154,13 +155,13 @@
             this.socketInputStream.close();
         }
-        catch (Throwable t) {}
+        catch (Throwable ignored) {}
         try {
             this.socketOutputStream.close();
         }
-        catch (Throwable t2) {}
+        catch (Throwable ignored) {}
         try {
             this.networkSocket.close();
         }
-        catch (Throwable t3) {}
+        catch (Throwable ignored) {}
     }
     
@@ -182,5 +183,5 @@
         int n = 100;
         while (!this.readPackets.isEmpty() && n-- >= 0 && !this.isSwitchingHandler) {
-            ((Packet)this.readPackets.remove(0)).processPacket(this.netHandler);
+            this.readPackets.remove(0).processPacket(this.netHandler);
         }
         if (this.isTerminating && this.readPackets.isEmpty()) {
