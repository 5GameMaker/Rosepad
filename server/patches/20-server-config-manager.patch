java/net/minecraft/src/ServerConfigurationManager.java
25 - private Set bannedPlayers;
25 + private Set<String> bannedPlayers;
26 - private Set bannedIPs;
26 + private Set<String> bannedIPs;
27 - private Set ops;
27 + private Set<String> ops;
28 + private Set<String> whitelistedPlayers;
29 + private Set<String> whitelistedIPs;
30 + private boolean whitelistEnabled;
45 + this.whitelistedPlayers = new HashSet<>();
46 + this.whitelistedIPs = new HashSet<>();
47 + this.whitelistEnabled = false;
34 + private File whitelistFile;
53 + this.whitelistFile = minecraftServer.getFile("whitelist.txt");
56 + this.whitelistEnabled = minecraftServer.propertyManagerObj.getBooleanProperty("whitelist", false);
100 + if (!this.whitelistedPlayers.contains(string2.trim().toLowerCase()) && this.whitelistEnabled) {
101 + netLoginHandler1.kickUser("You are not whitelisted on this server!");
102 + return null;
103 + }
60 + this.loadWhitelistedPlayers();
61 + this.loadWhitelistedIPs();
65 + this.saveWhitelistedPlayers();
66 + this.saveWhitelistedIPs();
115 + if (!this.whitelistedIPs.contains(string4.trim().toLowerCase()) && this.whitelistedIPs.size() > 0 && this.whitelistEnabled) {
116 + netLoginHandler1.kickUser("You are not whitelisted on this server!");
117 + return null;
118 + }
35 + private File whitelistIPsFile;
55 + this.whitelistIPsFile = minecraftServer.getFile("whitelist-ips.txt");
281 + private void loadWhitelistedPlayers() {
282 +     try {
283 +         this.whitelistedPlayers.clear();
284 +         final BufferedReader bufferedReader1 = new BufferedReader((Reader)new FileReader(this.whitelistFile));
285 +         String string2 = "";
286 +         while ((string2 = bufferedReader1.readLine()) != null) {
287 +             this.whitelistedPlayers.add(string2.trim().toLowerCase());
288 +         }
289 +         bufferedReader1.close();
290 +     }
291 +     catch (Exception exception3) {
292 +         ServerConfigurationManager.logger.warning(new StringBuilder("Failed to load player whitelist: ").append(exception3).toString());
293 +     }
294 + }
295 + private void saveWhitelistedPlayers() {
296 +     try {
297 +         final PrintWriter printWriter1 = new PrintWriter((Writer)new FileWriter(this.whitelistFile, false));
298 +         for (final String string3 : this.whitelistedPlayers) {
299 +             printWriter1.println(string3);
300 +         }
301 +         printWriter1.close();
302 +     }
303 +     catch (Exception exception4) {
304 +         ServerConfigurationManager.logger.warning(new StringBuilder("Failed to save player whitelist: ").append(exception4).toString());
305 +     }
306 + }
307 + public void whitelistPlayer(final String string1) {
308 +     this.whitelistedPlayers.add(string1.toLowerCase());
309 +     this.saveWhitelistedPlayers();
310 + }
311 + public void unwhitelistPlayer(final String string1) {
312 +     this.whitelistedPlayers.remove(string1.toLowerCase());
313 +     this.saveWhitelistedPlayers();
314 + }
315 + private void loadWhitelistedIPs() {
316 +     try {
317 +         this.whitelistedIPs.clear();
318 +         final BufferedReader bufferedReader1 = new BufferedReader((Reader)new FileReader(this.whitelistIPsFile));
319 +         String string2 = "";
320 +         while ((string2 = bufferedReader1.readLine()) != null) {
321 +             this.whitelistedIPs.add(string2.trim().toLowerCase());
322 +         }
323 +         bufferedReader1.close();
324 +     }
325 +     catch (Exception exception3) {
326 +         ServerConfigurationManager.logger.warning(new StringBuilder("Failed to load ip whitelist: ").append(exception3).toString());
327 +     }
328 + }
329 + private void saveWhitelistedIPs() {
330 +     try {
331 +         final PrintWriter printWriter1 = new PrintWriter((Writer)new FileWriter(this.whitelistIPsFile, false));
332 +         for (final String string3 : this.whitelistedIPs) {
333 +             printWriter1.println(string3);
334 +         }
335 +         printWriter1.close();
336 +     }
337 +     catch (Exception exception4) {
338 +         ServerConfigurationManager.logger.warning(new StringBuilder("Failed to save ip whitelist: ").append(exception4).toString());
339 +     }
340 + }
341 + public void whitelistIP(final String string1) {
342 +     this.whitelistedIPs.add(string1.toLowerCase());
343 +     this.saveWhitelistedIPs();
344 + }
345 + public void unwhitelistIP(final String string1) {
346 +     this.whitelistedIPs.remove(string1.toLowerCase());
347 +     this.saveWhitelistedIPs();
348 + }
349 + public void enableWhitelist() {
350 +     this.whitelistEnabled = true;
351 + }
352 + public void disableWhitelist() {
353 +     this.whitelistEnabled = false;
354 + }

